import pygame
import sys
import random

# Initialize Pygame
pygame.init()

# Set up the screen dimensions
screen_width = 800
screen_height = 600
screen = pygame.display.set_mode((screen_width, screen_height))
pygame.display.set_caption("My Pet Skunk")

# Colors
BLACK = (0, 0, 0)
WHITE = (255, 255, 255)
GREEN = (0, 255, 0)
RED = (255, 0, 0)
BROWN = (139, 69, 19) 

# Skunk class
class Skunk(pygame.sprite.Sprite):
    def __init__(self, image, screen_width):
        super().__init__()
        self.original_image = pygame.transform.scale(pygame.image.load(image), (50, 50))
        self.image = self.original_image
        self.rect = self.image.get_rect()
        self.rect.centerx = screen_width // 2  # Center horizontally
        self.rect.centery = 2 * screen_height // 3  # 2/3 down the screen
        self.speed = 1
        self.direction = 'left'  # Start moving to the left initially
        self.flipped = False
        self.moving = True  # Flag to control movement
        self.bathed = False  # Flag to track if skunk has been bathed
        # Initialize stats to 0
        self.happiness = 0
        self.cleanliness = 0
        self.health = 100
        self.hunger = 100
        self.friendship = 0


    def update(self, boundaries_rect):
        if self.moving:
            if self.direction == 'left':
                if self.rect.left > boundaries_rect.left:
                    self.rect.x -= self.speed
                    if not self.flipped:
                        self.image = pygame.transform.flip(self.original_image, True, False)
                        self.flipped = True
                else:
                    self.direction = 'right'
            elif self.direction == 'right':
                if self.rect.right < boundaries_rect.right:
                    self.rect.x += self.speed
                    if self.flipped:
                        self.image = self.original_image
                        self.flipped = False
                else:
                    self.direction = 'left'

    def draw(self, screen):
        screen.blit(self.image, self.rect)

    def is_clicked(self, mouse_pos):
        return self.rect.collidepoint(mouse_pos)
    
    def feed(self):
        # Feed the skunk
        # Update hunger and cleanliness
        self.hunger -= 4  # Decrease hunger by 4%
        self.cleanliness -= 4  # Decrease cleanliness by 4%
        self.health += 4  # Increase health by 4%
        
        # Ensure hunger and cleanliness don't go below 0
        self.hunger = max(self.hunger, 0)
        self.cleanliness = max(self.cleanliness, 0)
        self.health = min(self.health, 100)
    
    def play(self):
        # Play with the skunk
        # Update happiness, friendship, and cleanliness
        self.happiness += 4  # Increase happiness by 4%
        self.friendship += 4  # Increase friendship by 4%
        self.cleanliness -= 4  # Decrease cleanliness by 4%
        self.health += 4  # Increase health by 4%
        
        # Ensure attributes don't exceed 100 or go below 0
        self.happiness = min(self.happiness, 100)
        self.friendship = min(self.friendship, 100)
        self.cleanliness = max(self.cleanliness, 0)
        self.health = min(self.health, 100)
    
    def talk(self):
        # Talk to the skunk
        # Update happiness and friendship
        self.happiness += 4  # Increase happiness by 4%
        self.friendship += 4  # Increase friendship by 4%
        
        # Ensure happiness and friendship don't exceed 100
        self.happiness = min(self.happiness, 100)
        self.friendship = min(self.friendship, 100)
    
    def stroke(self):
        # Stroke the skunk
        # Update happiness, cleanliness, and friendship
        self.happiness += 4  # Increase happiness by 4%
        self.cleanliness -= 4  # Decrease cleanliness by 4%
        self.friendship += 4  # Increase friendship by 4%
        
        # Ensure attributes don't exceed 100 or go below 0
        self.happiness = min(self.happiness, 100)
        self.cleanliness = max(self.cleanliness, 0)
        self.friendship = min(self.friendship, 100)
        
    def bathe(self):
    # Bathe the skunk
    # Update cleanliness and health
        self.cleanliness += 4  # Increase cleanliness by 4%
        self.health += 4  # Increase health by 4%
        
        # Ensure cleanliness and health don't exceed 100
        self.cleanliness = min(self.cleanliness, 100)
        self.health = min(self.health, 100)


def aim_message(screen):
    # Font settings
    font = pygame.font.SysFont(None, 26)
    # Messages to be displayed
    breezy_message = "Meet Breezy. (press any key to continue)"
    skunk_message = "He doesn't like you very much."
    third_message = "Figure out how to fix that."
    # Calculate text size and position
    box_width = 450
    box_height = 30
    box_left = (screen_width - box_width) // 2
    box_top = 70  # Adjusted to display the message at the top
    # Create a surface for the message box
    message_box_surface = pygame.Surface((box_width, box_height))
    message_box_surface.fill((139, 69, 19))  # Brown color
    
    messages = [breezy_message, skunk_message, third_message]
    current_message_index = 0
    
    # Typewriter effect loop
    while current_message_index < len(messages):
        current_message = messages[current_message_index]
        displayed_text = ""
        typing_done = False
        
        while not typing_done:
            for event in pygame.event.get():
                if event.type == pygame.KEYDOWN:
                    typing_done = True
            
            # Add characters one by one to displayed_text
            displayed_text += current_message[len(displayed_text)]
            
            # Render the displayed text with typewriter effect
            rendered_text = font.render(displayed_text, True, (240, 200, 160))
            text_width, text_height = rendered_text.get_size()
            
            # Clear the message box surface
            message_box_surface.fill((139, 69, 19))  # Change color to brown for skunk message
            
            # Render the message onto the message box surface
            message_box_surface.blit(rendered_text, ((box_width - text_width) // 2, (box_height - text_height) // 2))
            
            # Draw the message box onto the screen with thicker border
            pygame.draw.rect(screen, (60, 30, 10), (box_left, box_top, box_width, box_height), 3)
            screen.blit(message_box_surface, (box_left, box_top))
            
            # Update the display
            pygame.display.flip()
            
            # Pause briefly to simulate typewriter effect
            pygame.time.wait(50)  # Adjust the wait time as needed
            
            # Check if typing is done
            if len(displayed_text) == len(current_message):
                typing_done = True
        
        # Wait for a key press before transitioning to the next message
        key_pressed = False
        while not key_pressed:
            for event in pygame.event.get():
                if event.type == pygame.KEYDOWN:
                    key_pressed = True
        
        # Move to the next message
        current_message_index += 1
        
def launch_mini_game():
    pygame.init()

    # Set up the screen
    WIDTH, HEIGHT = 800, 600
    screen = pygame.display.set_mode((WIDTH, HEIGHT))
    pygame.display.set_caption("Get Breezy!")

    # Brown color
    BROWN = (139, 69, 19)

    # Load images
    skunk_img = pygame.image.load("pet_skunk.png")
    skunk_img = pygame.transform.scale(skunk_img, (100, 100))
    carrier_img = pygame.image.load("pet_carrier.png")
    carrier_img = pygame.transform.scale(carrier_img, (100, 100))
    hand_img = pygame.image.load("cartoon_hand.png")
    hand_img = pygame.transform.scale(hand_img, (100, 100))

    # Calculate initial positions of skunk and carrier
    skunk_corner_distance = ((WIDTH - 100) ** 2 + (HEIGHT - 100) ** 2) ** 0.5
    skunk_corner_margin = 50  # Margin to ensure the skunk doesn't start too close to the corner
    if skunk_corner_distance > skunk_corner_margin:
        corner_margin_ratio = skunk_corner_margin / skunk_corner_distance
        skunk_x = random.randint(int((WIDTH - 100) * corner_margin_ratio), int((WIDTH - 100) * (1 - corner_margin_ratio)))
        skunk_y = random.randint(int((HEIGHT - 100) * corner_margin_ratio), int((HEIGHT - 100) * (1 - corner_margin_ratio)))
    else:
        skunk_x = WIDTH // 2 - 50
        skunk_y = HEIGHT // 2 - 50

    # Calculate carrier position opposite to skunk, ensuring it doesn't start in the top-left corner
    if skunk_x == 0 and skunk_y == 0:  # If skunk starts in the top-left corner
        carrier_x = random.randint(100, WIDTH - 100)  # Randomize carrier position in X-axis
        carrier_y = random.randint(100, HEIGHT - 100)  # Randomize carrier position in Y-axis
    else:
        carrier_x = random.randint(0, WIDTH - 100)  # Randomize carrier position in X-axis
        carrier_y = random.randint(0, HEIGHT - 100)  # Randomize carrier position in Y-axis

    player_x = WIDTH // 2
    player_y = HEIGHT // 2
    player_speed = 5
    skunk_speed = 2
    time_remaining = 30
    font = pygame.font.Font(None, 36)

    # Display instructions
    instructions_font = pygame.font.Font(None, 24)
    instructions_text = instructions_font.render("Use arrow keys to move your hand. Get Breezy into his carrier before time runs out!", True, (0, 0, 0))
    instructions_rect = instructions_text.get_rect(center=(WIDTH // 2, HEIGHT // 2))

    # Main game loop
    show_instructions = True
    game_started = False
    running = True
    clock = pygame.time.Clock()
    while running:
        screen.fill(BROWN)  # Set background color to brown

        # Handle events
        for event in pygame.event.get():
            if event.type == pygame.QUIT:
                running = False
            elif event.type == pygame.KEYDOWN and not game_started:
                show_instructions = False
                game_started = True

        if show_instructions:
            screen.blit(instructions_text, instructions_rect)
        else:
            # Handle player input
            keys = pygame.key.get_pressed()
            if keys[pygame.K_LEFT]:
                player_x -= player_speed
            if keys[pygame.K_RIGHT]:
                player_x += player_speed
            if keys[pygame.K_UP]:
                player_y -= player_speed
            if keys[pygame.K_DOWN]:
                player_y += player_speed

            # Ensure player stays within the screen bounds
            player_x = max(0, min(player_x, WIDTH - 100))
            player_y = max(0, min(player_y, HEIGHT - 100))

            # Draw skunk, carrier, and player
            screen.blit(skunk_img, (skunk_x, skunk_y))
            screen.blit(carrier_img, (carrier_x, carrier_y))
            screen.blit(hand_img, (player_x, player_y))

            # Move skunk away from player if player collides with skunk
            player_rect = pygame.Rect(player_x, player_y, 100, 100)
            skunk_rect = pygame.Rect(skunk_x, skunk_y, 100, 100)
            if player_rect.colliderect(skunk_rect):
                dx = skunk_x - player_x
                dy = skunk_y - player_y
                distance = ((dx ** 2) + (dy ** 2)) ** 0.5
                if distance != 0:
                    skunk_x += skunk_speed * dx / distance
                    skunk_y += skunk_speed * dy / distance

            # Check if skunk is about to move off-screen and adjust its position
            skunk_x = max(0, min(skunk_x, WIDTH - 100))
            skunk_y = max(0, min(skunk_y, HEIGHT - 100))

            # Check if player puts the skunk mostly in the carrier
            if (skunk_x + 30 >= carrier_x and skunk_x + 70 <= carrier_x + 100 and
                    skunk_y + 30 >= carrier_y and skunk_y + 70 <= carrier_y + 100):
                running = False

            # Display time remaining
            time_remaining -= clock.tick(60) / 1000  # Decrease time remaining by elapsed time
            text = font.render(f"Time Remaining: {max(0, int(time_remaining))}", True, (0, 0, 0))
            screen.blit(text, (10, 10))

            # Check if time runs out
            if time_remaining <= 0:
                running = False

        pygame.display.flip()

    # Game over
    screen.fill(BROWN)  # Set background color to brown
    if (skunk_x + 30 >= carrier_x and skunk_x + 70 <= carrier_x + 100 and
            skunk_y + 30 >= carrier_y and skunk_y + 70 <= carrier_y + 100):
        text = font.render("You caught the skunk!", True, (0, 0, 0))
    else:
        text = font.render("Time's up! You didn't catch the skunk.", True, (0, 0, 0))
    screen.blit(text, (WIDTH // 2 - text.get_width() // 2, HEIGHT // 2 - text.get_height() // 2))
    pygame.display.flip()

    # Wait for a moment before closing the game
    pygame.time.wait(3000)

    # Quit Pygame
    pygame.quit()
    sys.exit()



def main():
    clock = pygame.time.Clock()
    
    # Display loading screen
    loading_screen(screen)

    # Get player name
    player_name = get_player_name(screen)

    # Display title screen
    title_screen(screen, player_name)

    aunthouse_image = pygame.image.load("aunthouse.jpeg")
    aunthouse_image = pygame.transform.scale(aunthouse_image, (screen_width, screen_height))
    boundaries_rect = pygame.Rect(300, 330, 180, 250)

    skunk = Skunk("pet_skunk.png", screen_width)

    menu_font = pygame.font.SysFont(None, 24)
    menu_displayed = False
    
    aim_message_displayed = False  # Flag to keep track of aim message display

    last_stat_update_time = pygame.time.get_ticks()  # Track the last time stats were updated

    while True:
        current_time = pygame.time.get_ticks()

        # Check if it's time to update the stats (every 4 seconds)
        if current_time - last_stat_update_time >= 4000:
            # Update the stats
            skunk.happiness -= 5
            skunk.cleanliness -= 5
            skunk.health -= 5
            skunk.hunger -= 5
            skunk.friendship -= 5

            # Ensure stats don't go below 0
            skunk.happiness = max(skunk.happiness, 0)
            skunk.cleanliness = max(skunk.cleanliness, 0)
            skunk.health = max(skunk.health, 0)
            skunk.hunger = max(skunk.hunger, 0)
            skunk.friendship = max(skunk.friendship, 0)

            # Update the last stat update time
            last_stat_update_time = current_time

        # Check if skunk's friendship reaches 100%
        if skunk.friendship >= 100:
            # Display special dialogue
            special_dialogue = [
                "WOW! You did it! Breezy loves you now!",
                "Time to get him in your car and drive him home."
            ]
            display_dialogue(screen, special_dialogue)
            
            # Prompt the player to launch the mini-game
            mini_game_prompt = [
                "Press SPACE to put Breezy into his carrier."
            ]
            display_dialogue(screen, mini_game_prompt)

            # Wait for the player to press SPACE to start the mini-game
            waiting = True
            while waiting:
                for event in pygame.event.get():
                    if event.type == pygame.QUIT:
                        pygame.quit()
                        sys.exit()
                    elif event.type == pygame.KEYDOWN:
                        if event.key == pygame.K_SPACE:
                            waiting = False

            # Start the mini-game
            launch_mini_game()

        # Inside the main loop
        for event in pygame.event.get():
            # Handle events
            # Handle other events

            if event.type == pygame.QUIT:
                pygame.quit()
                sys.exit()
            elif event.type == pygame.MOUSEBUTTONDOWN:
                mouse_pos = pygame.mouse.get_pos()
                if skunk.is_clicked(mouse_pos):
                    # Skunk is clicked
                    skunk.moving = False  # Stop skunk movement
                    if not menu_displayed:
                        print("Displaying menu")
                        menu_options, menu_rect = display_menu(screen, menu_font, mouse_pos)  # Get menu options and menu rectangle
                        menu_displayed = True
                    else:
                        menu_displayed = False
                        skunk.moving = True  # Resume skunk movement when menu is closed
                elif menu_displayed:
                    # Check if any menu option is clicked
                    if menu_rect.collidepoint(mouse_pos):
                        selected_option_index = (mouse_pos[1] - menu_rect.top) // 30
                        selected_option = menu_options[selected_option_index]
                        if selected_option == "BATHE":
                            skunk.bathe()  # Bathe the skunk
                        elif selected_option == "FEED":
                            skunk.feed()  # Feed the skunk
                        elif selected_option == "PLAY":
                            skunk.play()  # Play with the skunk
                        elif selected_option == "TALK":
                            skunk.talk()  # Talk to the skunk
                        elif selected_option == "STROKE":
                            skunk.stroke()  # Stroke the skunk

        screen.fill(BLACK)
        screen.blit(aunthouse_image, (0, 0))

        # Update skunk
        skunk.update(boundaries_rect)
        skunk.draw(screen)
        
        if not aim_message_displayed:
            aim_message(screen)
            aim_message_displayed = True

        if aim_message_displayed:
            if not menu_displayed:
                display_stats(screen, menu_font, skunk)
        if menu_displayed:
            display_menu(screen, menu_font, (skunk.rect.centerx, skunk.rect.centery))

        # Update the display of stats
        display_stats(screen, menu_font, skunk)

        pygame.display.flip()
        clock.tick(60)



def display_menu(screen, font, position):
    menu_options = ["TALK", "FEED", "PLAY", "BATHE", "STROKE"]

    menu_height = len(menu_options) * 30
    menu_width = 150
    menu_rect = pygame.Rect(0, 0, menu_width, menu_height)

    # Offset the menu position from the skunk's position
    menu_rect.centerx = position[0] + 25  # Offset horizontally
    menu_rect.centery = (position[1] - menu_height // 2) - 50  # Offset vertically

    # Draw semi-transparent white background for the menu
    menu_surface = pygame.Surface((menu_width, menu_height))
    menu_surface.set_alpha(200)  # Set transparency (0-255)
    menu_surface.fill(WHITE)
    screen.blit(menu_surface, menu_rect)

    for i, option in enumerate(menu_options):
        text = font.render(option, True, BLACK)
        text_rect = text.get_rect(center=(menu_rect.centerx, menu_rect.top + i * 30 + 15))
        screen.blit(text, text_rect)

    return menu_options, menu_rect  # Return menu options and menu rectangle

def loading_screen(screen):
    # Play music
    play_music()

    # Loading progress
    loading_progress = 0

    # Main loop
    while loading_progress <= 100:
        for event in pygame.event.get():
            if event.type == pygame.QUIT:
                pygame.quit()
                sys.exit()

        # Clear the screen
        screen.fill(BLACK)

        # Draw loading text
        font = pygame.font.SysFont(None, 36)
        text = font.render("Loading...", True, WHITE)
        text_rect = text.get_rect(center=(screen_width // 2, screen_height // 2 - 50))
        screen.blit(text, text_rect)

        # Draw loading progress bar
        pygame.draw.rect(screen, GREEN, (screen_width // 2 - 150, screen_height // 2, 300, 30))
        pygame.draw.rect(screen, WHITE, (screen_width // 2 - 150, screen_height // 2, loading_progress * 3, 30))

        # Update the display
        pygame.display.flip()

        # Simulate loading progress
        loading_progress += 1
        pygame.time.wait(20)  # Adjust the wait time for smoother progress bar animation

    return True


def title_screen(screen, player_name):
    # Clear the screen
    screen.fill(BLACK)

    # Draw title text
    font = pygame.font.SysFont(None, 72)
    text = font.render("My Pet Skunk", True, WHITE)
    text_rect = text.get_rect(center=(screen_width // 2, screen_height // 2 - 100))
    screen.blit(text, text_rect)

    # Draw start button
    pygame.draw.rect(screen, GREEN, (screen_width // 2 - 100, screen_height // 2 - 25, 200, 50))
    font = pygame.font.SysFont(None, 36)
    text = font.render("Start", True, BLACK)
    text_rect = text.get_rect(center=(screen_width // 2, screen_height // 2))
    screen.blit(text, text_rect)

    # Draw quit button
    pygame.draw.rect(screen, RED, (screen_width // 2 - 100, screen_height // 2 + 75, 200, 50))
    text = font.render("Quit", True, BLACK)
    text_rect = text.get_rect(center=(screen_width // 2, screen_height // 2 + 100))
    screen.blit(text, text_rect)

    # Update the display
    pygame.display.flip()

    # Wait for the player to click the start or quit button
    while True:
        for event in pygame.event.get():
            if event.type == pygame.QUIT:
                pygame.quit()
                sys.exit()
            elif event.type == pygame.MOUSEBUTTONDOWN:
                mouse_pos = pygame.mouse.get_pos()
                if screen_width // 2 - 100 <= mouse_pos[0] <= screen_width // 2 + 100:
                    if screen_height // 2 - 25 <= mouse_pos[1] <= screen_height // 2 + 25:
                        # Start button clicked
                        stop_music()  # Stop the music
                        play_phone_ring()  # Play phone ringing sound
                        dialogue_lines = [
                            f"Hi, {player_name}, I have some news.",
                            "Aunt Gertrude is dead.",
                            "What do you mean, 'who's Aunt Gertrude?'",
                            "Okay, well, she's dead. And she left you something in her will.",
                            "No, it's not money...",
                            "She left you her pet skunk, Breezy.  No, I'm not kidding.",
                            "You need to go pick up Breezy right now. Take good care of him.",
                            "Bye."
                        ]
                        display_dialogue(screen, dialogue_lines)
                        # Update aunthouse_displayed to True
                        return True
                    elif screen_height // 2 + 75 <= mouse_pos[1] <= screen_height // 2 + 125:
                        # Quit button clicked
                        pygame.quit()
                        sys.exit()
                        
def display_dialogue(screen, dialogue_lines):
    # Display dialogue lines with typewriter effect
    font = pygame.font.SysFont(None, 24)
    y_position = screen_height - 150

    for line in dialogue_lines:
        displayed_text = ""
        for char in line:
            # Render displayed text
            displayed_text += char
            text = font.render(displayed_text, True, WHITE)
            text_rect = text.get_rect(left=100, top=y_position)

            # Clear the screen
            screen.fill(BLACK)

            # Draw speech bubble
            pygame.draw.rect(screen, WHITE, (50, y_position - 30, screen_width - 100, 60), 2)

            # Blit the text onto the screen
            screen.blit(text, text_rect)

            # Update the display
            pygame.display.flip()

            # Pause briefly to simulate typewriter effect
            pygame.time.wait(30)  # Adjust the wait time as needed

        # Wait for a key press to continue to the next line
        waiting = True
        while waiting:
            for event in pygame.event.get():
                if event.type == pygame.QUIT:
                    pygame.quit()
                    sys.exit()
                elif event.type == pygame.KEYDOWN or event.type == pygame.MOUSEBUTTONDOWN:
                    waiting = False


def play_phone_ring():
    # Play phone ringing sound
    pygame.mixer.Sound("phonering.mp3").play()

def play_music():
    # Play background music
    pygame.mixer.music.load("skunkmusic.mp3")
    pygame.mixer.music.play(-1)  # Loop the music indefinitely

def stop_music():
    pygame.mixer.music.stop()

def get_player_name(screen):
    # Clear the screen
    screen.fill(BLACK)

    # Draw prompt text
    font = pygame.font.SysFont(None, 36)
    text = font.render("Enter your name:", True, WHITE)
    text_rect = text.get_rect(center=(screen_width // 2, screen_height // 2 - 50))
    screen.blit(text, text_rect)

    # Update the display
    pygame.display.flip()

    # Input loop
    input_text = ""
    input_rect = pygame.Rect(screen_width // 2 - 100, screen_height // 2, 200, 50)
    active = True
    while active:
        for event in pygame.event.get():
            if event.type == pygame.QUIT:
                pygame.quit()
                sys.exit()
            elif event.type == pygame.KEYDOWN:
                if event.key == pygame.K_RETURN:
                    active = False
                elif event.key == pygame.K_BACKSPACE:
                    input_text = input_text[:-1]
                else:
                    input_text += event.unicode

        # Clear the input area
        pygame.draw.rect(screen, BLACK, input_rect)

        # Render the input text
        font = pygame.font.SysFont(None, 36)
        text_surface = font.render(input_text, True, WHITE)
        screen.blit(text_surface, (input_rect.x + 5, input_rect.y + 5))

        # Draw input area rectangle
        pygame.draw.rect(screen, WHITE, input_rect, 2)

        # Update the display
        pygame.display.flip()

    return input_text



def display_stats(screen, font, skunk):
    # Define the stats text
    stats_text = [
        f"Happiness: {skunk.happiness}%",
        f"Cleanliness: {skunk.cleanliness}%",
        f"Health: {skunk.health}%",
        f"Hunger: {skunk.hunger}%",
        f"Friendship: {skunk.friendship}%"
    ]

    # Calculate the dimensions of the brown box
    box_width = 160
    box_height = len(stats_text) * 20 + 10  # Adjust height based on number of stats
    box_left = 65
    box_top = 60

    # Draw the dark brown border
    border_rect = pygame.Rect(box_left, box_top, box_width, box_height)
    pygame.draw.rect(screen, (60, 30, 10), border_rect, 3)  # Increased border thickness

    # Draw the brown box
    box_rect = pygame.Rect(box_left + 3, box_top + 3, box_width - 6, box_height - 6)  # Adjusted inner box position
    pygame.draw.rect(screen, (139, 69, 19), box_rect)

    # Display stats text in brighter tan color
    tan_color = (240, 200, 160)  # Brighter tan color RGB values


    y = 70  # Initial y position
    for stat in stats_text:
        text_surface = font.render(stat, True, tan_color)
        text_rect = text_surface.get_rect(left=70, top=y)  # Adjusted x position
        screen.blit(text_surface, text_rect)
        y += 20  # Increment y position for the next stat


if __name__ == "__main__":
    main()
